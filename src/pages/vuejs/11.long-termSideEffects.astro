---
import Layout from '@layouts/Layout.astro';
---

<!-- 过期的副作用 -->
<Layout title="过期的副作用">
  <div></div>
</Layout>

<script>
  interface EffectOptions extends Object {
    scheduler?: (fn?: Function) => void;
    lazy?: boolean;
  }

  interface ActiveEffect extends Function {
    deps: Set<Function>[];
    options: EffectOptions;
  }

  type WatchOptionFlush = 'pre' | 'post' | 'sync';
  type WatchCbFn = (newValue: any, oldValue: any, onInvalidate?: (fn: Function) => void) => void;

  interface WatchOptions extends Object {
    immediate?: boolean;
    flush?: WatchOptionFlush;
  }

  const bucket = new WeakMap<Object, any>();
  let activeEffect: ActiveEffect;
  const effectStack = [];

  const data: { [key in string | symbol]: any } = { text: 'hello world', ok: true, number: 1 };

  const obj = new Proxy(data, {
    get(target, key) {
      track(target, key);

      return target[key];
    },
    set(target, key, newVal) {
      target[key] = newVal;
      trigger(target, key);

      return true;
    },
  });

  function effect(fn: Function, options: EffectOptions = {}) {
    const effectFn: ActiveEffect = () => {
      // 函数清除工作
      cleanup(effectFn);
      // 当调用 effect 注册副作用函数时，将副作用函数 fn 赋值给 activeEffect
      activeEffect = effectFn;
      effectStack.push(effectFn);
      // 执行副作用函数, 保存返回值
      const res = fn();
      effectStack.pop();
      activeEffect = effectStack.at(-1);
      return res;
    };
    effectFn.options = options;
    effectFn.deps = [];
    if (!effectFn.options.lazy) {
      effectFn();
    }
    return effectFn;
  }

  // 依赖收集函数
  function track(target: object, key: string | symbol) {
    if (!activeEffect) return;

    let depsMap = bucket.get(target);
    if (!depsMap) {
      bucket.set(target, (depsMap = new Map<string | symbol, Set<Function>>()));
    }
    let deps = depsMap.get(key);
    if (!deps) {
      depsMap.set(key, (deps = new Set()));
    }

    deps.add(activeEffect);

    activeEffect.deps.push(deps);
  }

  // 触发依赖
  function trigger(target: object, key: string | symbol) {
    let depsMap = bucket.get(target);
    if (!depsMap) return;
    const effects = depsMap.get(key);

    const effectsToRun = new Set<any>();
    effects &&
      effects.forEach((fn) => {
        if (activeEffect !== fn) {
          effectsToRun.add(fn);
        }
      });

    effectsToRun.forEach((effectFn) => {
      if (effectFn.options.scheduler) {
        effectFn.options.scheduler(effectFn);
      } else {
        effectFn();
      }
    });
  }

  function cleanup(effectFn) {
    for (let i = 0; i < effectFn.deps.length; i++) {
      const deps = effectFn.deps[i];
      deps.delete(effectFn);
    }
    effectFn.deps.length = 0;
  }

  // 递归读取
  function traverse(value, seen = new Set()) {
    if (typeof value !== 'object' || value === null || seen.has(value)) return;

    seen.add(value);

    for (const k in value) {
      traverse(value[k], seen);
    }

    return value;
  }

  function computed(getter) {
    let value;
    let dirty = true;
    const effectFn = effect(getter, {
      lazy: true,
      scheduler() {
        if (!dirty) {
          dirty = true;
          trigger(obj, 'value');
        }
      },
    });
    const obj = {
      get value() {
        if (dirty) {
          value = effectFn();
          dirty = false;
        }
        track(obj, 'value');
        return value;
      },
    };

    return obj;
  }

  function watch(source, fn: WatchCbFn, options: WatchOptions = {}) {
    let getter;
    if (typeof source === 'function') {
      getter = source;
    } else {
      getter = () => traverse(source);
    }
    let newValue, oldValue, cleanup;

    function onInvalidate(fn) {
      cleanup = fn;
    }

    const job = () => {
      newValue = effectFn();
      if (cleanup) {
        cleanup();
      }

      fn(newValue, oldValue, onInvalidate);
      newValue = oldValue;
    };

    const effectFn = effect(() => getter(), {
      lazy: true,
      scheduler: () => {
        if (options.flush === 'post') {
          Promise.resolve().then(job);
        } else {
          job();
        }
      },
    });

    if (options.immediate) {
      job();
    } else {
      oldValue = effectFn();
    }
  }

  let finalData;

  watch(
    obj,
    async (nv, ov, onInvalidate) => {
      let expired = false;
      onInvalidate(() => {
        expired = true;
      });

      const res = await Promise.resolve();

      if (!expired) {
        finalData = res;
      }
      console.log('数据改变', nv, ov);
    },
    {
      immediate: true,
    }
  );
</script>
