---
import Layout from '@layouts/Layout.astro';
---

<!-- 调度执行 -->
<Layout title="调度执行">
  <div></div>
</Layout>

<script>
  interface EffectOptions extends Object {
    scheduler?: (fn:Function) => void;
  }
  interface ActiveEffect extends Function {
    deps: Set<Function>[];
    options: EffectOptions;
  }

  const bucket = new WeakMap<Object, any>();
  let activeEffect: ActiveEffect;
  const effectStack = [];

  const data: { [key in string | symbol]: any } = { text: 'hello world', ok: true, number: 1 };

  const obj = new Proxy(data, {
    get(target, key) {
      track(target, key);

      return target[key];
    },
    set(target, key, newVal) {
      target[key] = newVal;
      trigger(target, key);

      return true;
    },
  });

  function effect(fn: Function, options: EffectOptions = {}) {
    const effectFn: ActiveEffect = () => {
      // 函数清除工作
      cleanup(effectFn);
      // 当调用 effect 注册副作用函数时，将副作用函数 fn 赋值给 activeEffect
      activeEffect = effectFn;
      effectStack.push(effectFn);
      // 执行副作用函数
      fn();
      effectStack.pop();
      activeEffect = effectStack.at(-1);
    };
    effectFn.options = options;
    effectFn.deps = [];
    effectFn();
  }

  // 依赖收集函数
  function track(target: object, key: string | symbol) {
    if (!activeEffect) return;

    let depsMap = bucket.get(target);
    if (!depsMap) {
      bucket.set(target, (depsMap = new Map<string | symbol, Set<Function>>()));
    }
    let deps = depsMap.get(key);
    if (!deps) {
      depsMap.set(key, (deps = new Set()));
    }

    deps.add(activeEffect);

    activeEffect.deps.push(deps);
  }

  // 触发依赖
  function trigger(target: object, key: string | symbol) {
    let depsMap = bucket.get(target);
    if (!depsMap) return;
    const effects = depsMap.get(key);

    const effectsToRun = new Set<any>();
    effects &&
      effects.forEach((fn) => {
        if (activeEffect !== fn) {
          effectsToRun.add(fn);
        }
      });

    effectsToRun.forEach((effectFn) => {
      if (effectFn.options.scheduler) {
        effectFn.options.scheduler(effectFn);
      } else {
        effectFn();
      }
    });
  }

  function cleanup(effectFn) {
    for (let i = 0; i < effectFn.deps.length; i++) {
      const deps = effectFn.deps[i];
      deps.delete(effectFn);
    }
    effectFn.deps.length = 0;
  }

  effect(
    () => {
      console.log(obj.number);
    },
    {
      scheduler(fn) {
        setTimeout(fn);
      },
    }
  );

  obj.number++;

  console.log('结束了');
</script>
